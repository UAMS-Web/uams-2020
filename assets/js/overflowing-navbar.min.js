/*
<<<<<<< HEAD
<<<<<<< HEAD
  * Bootstrap Responsive Collapse
  * Based on: https://github.com/psyon/bootstrap.responsive-collapse
  */
 (function ($) {
	$.fn.responsiveCollapse = function(options) {
		var settings = $.extend({
			breakPoint:       768,
			overflowItemText: 'More'
		}, options);

		var lastDocWidth = $(document).width();

		return this.filter('ul').each(function() {
			var $list        = $(this);
			var container    = $list.parent();
			var overflowItem = $('<li class="dropdown nav-item more-menu d-none"><a href="#" class="dropdown-toggle nav-link" data-toggle="dropdown">' + settings.overflowItemText + '</a><ul class="dropdown-menu dropdown-menu-right"></ul></li>').appendTo($list);
			var overflowList = $(overflowItem).find('ul.dropdown-menu');

			var thisWidth    = $list.outerWidth();
			var maxWidth     = $(container).width() - ($(container).find('.navbar-header').width() || 0);

			function reset() {
				var child = $(overflowList).children();
				var count = child.length;
				if (count > 0) {
					for (var i = 0; i < count; i++) {
						$(child[i]).insertBefore($list.children(':last-child'));
					}
				}
				$(overflowItem).addClass('d-none');
			}

			function grow() {
				var overflowWidth = $(overflowItem).width();
				var child         = $(overflowList).children();
				var count         = child.length;

				if (count > 0) {
					for (var i = 0; i < count; i++) {
						// move the first dropdown item to end of list
						$(child[i]).insertBefore($list.children(':last-child'));
						thisWidth = $list.outerWidth();
						if((i == count - 1 && thisWidth - overflowWidth > maxWidth) || (i != count - 1 && thisWidth > maxWidth)) {
							$(child[i]).prependTo(overflowList);
							break;
						}
					}
				}

				// Hide the overflow item if it has no children
				if($(overflowList).children().length == 0) {
					$(overflowItem).addClass('d-none');
				}

				return;
			}

			function shrink() {
				var child = $list.children(':not(:last-child)');
				var count = child.length;
				if (count < 1) return;

				// show the overflow link in case it's been hidden
				$(overflowItem).removeClass('d-none');

				for (var i = count - 1; i >= 0; i--) {
					// move the last item to dropdown
					$(child[i]).prependTo(overflowList);

					// recalc width
					thisWidth = $list.outerWidth();
					if(thisWidth < maxWidth) break;
				}
=======
  * Smartmenus "More" 
  * Based on: https://www.smartmenus.org/forums/topic/more-option-for-desktop-menu/#post-3015
  */

=======
  * Smartmenus "More" 
  * Based on: https://www.smartmenus.org/forums/topic/more-option-for-desktop-menu/#post-3015
  */

>>>>>>> dev
(function($) {

	$.SmartMenus.prototype.old_init = $.SmartMenus.prototype.init;
	$.SmartMenus.prototype.init = function(refresh) {
	  if (!refresh && !this.$root.hasClass('sm-vertical')) {
		var $originalItems = this.$root.children('li'),
		  $moreSub = this.$root.clone().removeAttr('id').removeAttr('class').addClass('dropdown-menu'),
		  $moreSubItems = $moreSub.children('li'),
		  $moreItem = $('<li class="dropdown nav-item"><a class="nav-link" href="#">More <span class="caret"></span></a></li>').append($moreSub).appendTo(this.$root),
		  self = this,
		  vieportW,
		  hiddenItems = [],
		  hiddenMoreItems = [];
	  }
  
	  this.old_init(refresh);
  
	  if (!refresh && !this.$root.hasClass('sm-vertical')) {
		function handleResize(force) {
          var curWidth = $(window).width();
		  if (vieportW !== curWidth || force) {
			// hide More item
			$moreItem.detach();
  
			// show all main menu items
			$.each(hiddenItems, function() {
			  $(this).appendTo(self.$root);
			});
			hiddenItems = [];
  
			// show all More sub items
			$.each(hiddenMoreItems, function() {
			  $(this).prependTo($moreSub);
			});
            hiddenMoreItems = [];
  
			// if in desktop view and the last item is wrapped
			if (!self.$root.hasClass('sm-vertical') && (/^(left|right)$/.test(self.$firstLink.parent().css('float')) || self.$firstLink.parent().css('display') == 'table-cell' || self.$firstLink.parent().css('flex-direction') == 'row') && $originalItems.eq(-1)[0].offsetTop != $originalItems.eq(0)[0].offsetTop) {
			  // show More item
			  $moreItem.appendTo(self.$root);

			  // while the More item is wrapped
			  while ($moreItem[0].offsetTop != $originalItems.eq(0)[0].offsetTop) {
				hiddenItems.unshift($moreItem.prev('li').detach());
			  };
  
			  // hide proper More sub items
			  $moreSubItems.slice(0, $moreSubItems.length - hiddenItems.length).each(function() {
				hiddenMoreItems.unshift($(this).detach());
			  });
<<<<<<< HEAD
>>>>>>> dev
=======
>>>>>>> dev
			}
  
			// save new viewport width
			vieportW = curWidth;
		  }
		}
		handleResize();
  
		$(window).bind({
		  'load.smartmenus': function() {
			handleResize(true);
		  },
		  'resize.smartmenus': handleResize
		});
<<<<<<< HEAD
<<<<<<< HEAD
	}
}(jQuery));

$(function() {
    $(".navbar-nav").responsiveCollapse();
});
=======
=======
>>>>>>> dev
	  }
	};
  
	// Fix isCollapsible method
	$.SmartMenus.prototype.isCollapsible = function() {
	  return this.$root.find('ul').eq(0).css('position') == 'static';
	};
  
<<<<<<< HEAD
  })(jQuery);
>>>>>>> dev
=======
  })(jQuery);
>>>>>>> dev
